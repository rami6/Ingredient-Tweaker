{"version":3,"sources":["components/UnitInput.js","components/IngredientFormRow.js","components/IngredientForm.js","App.js","serviceWorker.js","index.js"],"names":["units","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","unit","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","a","createElement","UnitInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","_ref","newValue","setState","setAdjustedUnit","onSuggestionsFetchRequested","_ref2","suggestions","onSuggestionsClearRequested","state","_this$state","optionNum","inputProps","placeholder","dist_default","id","concat","Component","IngredientFormRow","ingredientName","ingredientAmount","adjustedBaseAmount","adjustedUnit","bind","assertThisInitialized","handleInputChange","handleSelect","handleOriginalAmountChange","handleAdjustedBaseAmountChange","target","select","name","defineProperty","_this$props","updateSelect","multiplier","prevState","parseFloat","toFixed","updateMultiplier","_this$props2","selectedOption","newOriginalAmount","adjustedAmountField","placeHolder","_this$props3","className","type","onFocus","handleAmountFocus","checked","src_components_UnitInput","IngredientForm","rowCount","addFormRow","option","number","_this2","formRows","Array","from","keys","map","i","src_components_IngredientFormRow","key","onClick","App","src_components_IngredientForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4df3dd6c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport PropTypes from 'prop-types';\nimport './UnitInput.css';\n\nconst units = ['g', 'ml', 'tbsp', 'tsp', 'cup'];\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : units.filter(unit => unit.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nconst getSuggestionValue = suggestion => suggestion;\n\nconst renderSuggestion = suggestion => <div>{suggestion}</div>;\n\nclass UnitInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n    const { setAdjustedUnit } = this.props;\n    setAdjustedUnit(newValue);\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const { optionNum } = this.props;\n\n    const inputProps = {\n      placeholder: '',\n      value,\n      onChange: this.onChange\n    };\n\n    if (optionNum === 0) {\n      inputProps.placeholder = 'Unit';\n    }\n\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n        id={`unit-${optionNum}`}\n      />\n    );\n  }\n}\n\nUnitInput.propTypes = {\n  optionNum: PropTypes.number.isRequired,\n  setAdjustedUnit: PropTypes.func.isRequired\n};\n\nexport default UnitInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport UnitInput from './UnitInput';\nimport './IngredientFormRow.css';\n\nclass IngredientFormRow extends Component {\n  static handleAmountFocus(event) {\n    event.target.select();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ingredientName: '',\n      ingredientAmount: 0,\n      adjustedBaseAmount: 0,\n      adjustedUnit: ''\n    };\n\n    this.setAdjustedUnit = this.setAdjustedUnit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleOriginalAmountChange = this.handleOriginalAmountChange.bind(this);\n    this.handleAdjustedBaseAmountChange = this.handleAdjustedBaseAmountChange.bind(this);\n  }\n\n  setAdjustedUnit(unit) {\n    this.setState({\n      adjustedUnit: unit\n    });\n  }\n\n  handleInputChange(event) {\n    const { name } = event.target;\n    this.setState({\n      [name]: event.target.value\n    });\n  }\n\n  handleSelect() {\n    const { optionNum, updateSelect, multiplier } = this.props;\n    updateSelect(optionNum);\n    if (multiplier > 0) {\n      this.setState(prevState => ({\n        adjustedBaseAmount: parseFloat((prevState.ingredientAmount * multiplier).toFixed(1))\n      }));\n    } else {\n      const { updateMultiplier } = this.props;\n      updateMultiplier(1);\n      this.setState(prevState => ({\n        adjustedBaseAmount: prevState.ingredientAmount\n      }));\n    }\n  }\n\n  handleOriginalAmountChange(event) {\n    this.handleInputChange(event);\n    const { optionNum, selectedOption } = this.props;\n    const newOriginalAmount = event.target.value;\n    if (selectedOption === optionNum) {\n      const { updateMultiplier } = this.props;\n      if (newOriginalAmount > 0) {\n        const { adjustedBaseAmount } = this.state;\n        const ratio = adjustedBaseAmount / newOriginalAmount;\n        updateMultiplier(ratio);\n      } else {\n        this.setState({\n          adjustedBaseAmount: 0\n        });\n        updateMultiplier(1);\n      }\n    }\n  }\n\n  handleAdjustedBaseAmountChange(event) {\n    const { ingredientAmount } = this.state;\n    this.handleInputChange(event);\n    if (ingredientAmount > 0) {\n      const { updateMultiplier } = this.props;\n      const ratio = event.target.value / ingredientAmount;\n      updateMultiplier(ratio);\n    }\n  }\n\n  render() {\n    const { ingredientName, ingredientAmount, adjustedBaseAmount, adjustedUnit } = this.state;\n    const { optionNum, selectedOption, multiplier } = this.props;\n    let adjustedAmountField;\n    let placeHolder;\n\n    if (selectedOption === optionNum) {\n      adjustedAmountField = (\n        <input\n          className=\"amount-input\"\n          name=\"adjustedBaseAmount\"\n          type=\"number\"\n          value={adjustedBaseAmount}\n          onChange={this.handleAdjustedBaseAmountChange}\n          onFocus={IngredientFormRow.handleAmountFocus}\n        />\n      );\n    } else {\n      adjustedAmountField = (\n        <div className=\"adjusted-amount\">\n          {parseFloat((ingredientAmount * multiplier).toFixed(1))}\n        </div>\n      );\n    }\n\n    if (optionNum === 0) {\n      placeHolder = 'Ingredient name';\n    }\n\n    return (\n      <tr>\n        <td>\n          <input\n            type=\"radio\"\n            value={optionNum}\n            onChange={this.handleSelect}\n            checked={selectedOption === optionNum}\n          />\n        </td>\n        <td>\n          <input\n            name=\"ingredientName\"\n            type=\"text\"\n            value={ingredientName}\n            onChange={this.handleInputChange}\n            placeholder={placeHolder}\n          />\n        </td>\n        <td>\n          <input\n            className=\"amount-input\"\n            name=\"ingredientAmount\"\n            type=\"number\"\n            value={ingredientAmount}\n            onChange={this.handleOriginalAmountChange}\n            onFocus={IngredientFormRow.handleAmountFocus}\n          />\n        </td>\n        <td>\n          <UnitInput optionNum={optionNum} setAdjustedUnit={this.setAdjustedUnit} />\n        </td>\n        <td>\n          <div>→</div>\n        </td>\n        <td>{adjustedAmountField}</td>\n        <td>\n          <div className=\"adjusted-unit\">{adjustedUnit}</div>\n        </td>\n      </tr>\n    );\n  }\n}\n\nIngredientFormRow.propTypes = {\n  optionNum: PropTypes.number.isRequired,\n  selectedOption: PropTypes.number.isRequired,\n  multiplier: PropTypes.number.isRequired,\n  updateSelect: PropTypes.func.isRequired,\n  updateMultiplier: PropTypes.func.isRequired\n};\n\nexport default IngredientFormRow;\n","import React, { Component } from 'react';\nimport IngredientFormRow from './IngredientFormRow';\nimport './IngredientForm.css';\n\nclass IngredientForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowCount: 10,\n      selectedOption: 0,\n      multiplier: 1\n    };\n\n    this.updateSelect = this.updateSelect.bind(this);\n    this.updateMultiplier = this.updateMultiplier.bind(this);\n    this.addFormRow = this.addFormRow.bind(this);\n  }\n\n  updateSelect(option) {\n    this.setState({\n      selectedOption: option\n    });\n  }\n\n  updateMultiplier(number) {\n    this.setState({\n      multiplier: number\n    });\n  }\n\n  addFormRow() {\n    this.setState(prevState => ({\n      rowCount: prevState.rowCount + 1\n    }));\n  }\n\n  render() {\n    const { rowCount, selectedOption, multiplier } = this.state;\n    const rowIndices = Array.from(Array(rowCount).keys());\n    const formRows = rowIndices.map(i => (\n      <IngredientFormRow\n        key={i}\n        optionNum={i}\n        selectedOption={selectedOption}\n        multiplier={multiplier}\n        updateSelect={this.updateSelect}\n        updateMultiplier={this.updateMultiplier}\n      />\n    ));\n    return (\n      <div>\n        <table>\n          <tbody>{formRows}</tbody>\n        </table>\n        <button className=\"add-row-button\" type=\"button\" onClick={this.addFormRow}>\n          +\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default IngredientForm;\n","import React, { Component } from 'react';\nimport './App.css';\nimport IngredientForm from './components/IngredientForm';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Ingredient Tweaker</h2>\n        <IngredientForm />\n        <div className=\"description-container\">\n          <div>How to Use</div>\n          <ol>\n            <li>Fill original amounts of ingredients into the left side of arrows.</li>\n            <li>Select the ingredient to be a base.</li>\n            <li>\n              To the right side of the arrow, input the amount you want to consume at this time.\n            </li>\n            <li>You can see adjusted amounts of all ingredients!</li>\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}