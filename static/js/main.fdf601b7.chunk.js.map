{"version":3,"sources":["components/IngredientFormRow.js","components/IngredientForm.js","App.js","serviceWorker.js","index.js"],"names":["IngredientFormRow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ingredientName","ingredientAmount","adjustedBaseAmount","handleInputChange","bind","assertThisInitialized","handleSelect","handleOriginalAmountChange","handleAdjustedBaseAmountChange","event","target","select","name","setState","defineProperty","value","_this$props","optionNum","updateSelect","multiplier","prevState","parseFloat","toFixed","updateMultiplier","_this$props2","selectedOption","newOriginalAmount","adjustedField","placeHolder","_this$state","_this$props3","react_default","a","createElement","className","type","onChange","onFocus","handleAmountFocus","checked","placeholder","Component","IngredientForm","rowCount","option","number","_this2","formRows","Array","from","keys","map","i","src_components_IngredientFormRow","key","App","components_IngredientForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdf601b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './IngredientFormRow.css';\n\nclass IngredientFormRow extends Component {\n  static handleAmountFocus(event) {\n    event.target.select();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ingredientName: '',\n      ingredientAmount: 0,\n      adjustedBaseAmount: 0\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleOriginalAmountChange = this.handleOriginalAmountChange.bind(this);\n    this.handleAdjustedBaseAmountChange = this.handleAdjustedBaseAmountChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const { name } = event.target;\n    this.setState({\n      [name]: event.target.value\n    });\n  }\n\n  handleSelect() {\n    const { optionNum, updateSelect, multiplier } = this.props;\n    updateSelect(optionNum);\n    if (multiplier > 0) {\n      this.setState(prevState => ({\n        adjustedBaseAmount: parseFloat((prevState.ingredientAmount * multiplier).toFixed(1))\n      }));\n    } else {\n      const { updateMultiplier } = this.props;\n      updateMultiplier(1);\n      this.setState(prevState => ({\n        adjustedBaseAmount: prevState.ingredientAmount\n      }));\n    }\n  }\n\n  handleOriginalAmountChange(event) {\n    this.handleInputChange(event);\n    const { optionNum, selectedOption } = this.props;\n    const newOriginalAmount = event.target.value;\n    if (selectedOption === optionNum) {\n      const { updateMultiplier } = this.props;\n      if (newOriginalAmount > 0) {\n        const { adjustedBaseAmount } = this.state;\n        const ratio = adjustedBaseAmount / newOriginalAmount;\n        updateMultiplier(ratio);\n      } else {\n        this.setState({\n          adjustedBaseAmount: 0\n        });\n        updateMultiplier(1);\n      }\n    }\n  }\n\n  handleAdjustedBaseAmountChange(event) {\n    const { ingredientAmount } = this.state;\n    this.handleInputChange(event);\n    if (ingredientAmount > 0) {\n      const { updateMultiplier } = this.props;\n      const ratio = event.target.value / ingredientAmount;\n      updateMultiplier(ratio);\n    }\n  }\n\n  render() {\n    const { ingredientName, ingredientAmount, adjustedBaseAmount } = this.state;\n    const { optionNum, selectedOption, multiplier } = this.props;\n    let adjustedField;\n    let placeHolder;\n\n    if (selectedOption === optionNum) {\n      adjustedField = (\n        <input\n          className=\"amount-input\"\n          name=\"adjustedBaseAmount\"\n          type=\"number\"\n          value={adjustedBaseAmount}\n          onChange={this.handleAdjustedBaseAmountChange}\n          onFocus={IngredientFormRow.handleAmountFocus}\n        />\n      );\n    } else {\n      adjustedField = (\n        <div className=\"adjusted-amount\">\n          {parseFloat((ingredientAmount * multiplier).toFixed(1))}\n        </div>\n      );\n    }\n\n    if (optionNum === 0) {\n      placeHolder = 'Ingredient name';\n    }\n\n    return (\n      <tr>\n        <td>\n          <input\n            type=\"radio\"\n            value={optionNum}\n            onChange={this.handleSelect}\n            checked={selectedOption === optionNum}\n          />\n        </td>\n        <td>\n          <input\n            name=\"ingredientName\"\n            type=\"text\"\n            value={ingredientName}\n            onChange={this.handleInputChange}\n            placeholder={placeHolder}\n          />\n        </td>\n        <td>\n          <input\n            className=\"amount-input\"\n            name=\"ingredientAmount\"\n            type=\"number\"\n            value={ingredientAmount}\n            onChange={this.handleOriginalAmountChange}\n            onFocus={IngredientFormRow.handleAmountFocus}\n          />\n        </td>\n        <td>\n          <div>â†’</div>\n        </td>\n        <td>{adjustedField}</td>\n      </tr>\n    );\n  }\n}\n\nIngredientFormRow.propTypes = {\n  optionNum: PropTypes.number.isRequired,\n  selectedOption: PropTypes.number.isRequired,\n  multiplier: PropTypes.number.isRequired,\n  updateSelect: PropTypes.func.isRequired,\n  updateMultiplier: PropTypes.func.isRequired\n};\n\nexport default IngredientFormRow;\n","import React, { Component } from 'react';\nimport IngredientFormRow from './IngredientFormRow';\n\nclass IngredientForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowCount: 10,\n      selectedOption: 0,\n      multiplier: 1\n    };\n\n    this.updateSelect = this.updateSelect.bind(this);\n    this.updateMultiplier = this.updateMultiplier.bind(this);\n  }\n\n  updateSelect(option) {\n    this.setState({\n      selectedOption: option\n    });\n  }\n\n  updateMultiplier(number) {\n    this.setState({\n      multiplier: number\n    });\n  }\n\n  render() {\n    const { rowCount, selectedOption, multiplier } = this.state;\n    const rowIndices = Array.from(Array(rowCount).keys());\n    const formRows = rowIndices.map(i => (\n      <IngredientFormRow\n        key={i}\n        optionNum={i}\n        selectedOption={selectedOption}\n        multiplier={multiplier}\n        updateSelect={this.updateSelect}\n        updateMultiplier={this.updateMultiplier}\n      />\n    ));\n    return (\n      <table>\n        <tbody>{formRows}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default IngredientForm;\n","import React, { Component } from 'react';\nimport './App.css';\nimport IngredientForm from './components/IngredientForm';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Ingredient Tweaker</h2>\n        <IngredientForm />\n        <div className=\"description-container\">\n          <div>How to Use</div>\n          <ol>\n            <li>Fill original amounts of ingredients into the left side of arrows.</li>\n            <li>Select the ingredient to be a base.</li>\n            <li>\n              To the right side of the arrow, input the amount you want to consume at this time.\n            </li>\n            <li>You can see adjusted amounts of all ingredients!</li>\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}